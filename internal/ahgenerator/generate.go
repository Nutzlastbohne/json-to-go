package ahgenerator

import (
	"fmt"
	"github.com/a-h/generate"
	"github.com/a-h/generate/jsonschema"
	"go/format"
	"io"
	"os"
	"sort"
	"strings"
)

func ToStruct(filepath string) (err error) {
	var fileSchema *jsonschema.Schema
	inflatedBytes, err := InflateJson(filepath)

	if err != nil {
		return fmt.Errorf("inflating '%v' failed", filepath)
	}

	if fileSchema, err = jsonschema.Parse(string(inflatedBytes)); err != nil {
		return fmt.Errorf("parsing schema '%v' failed: %v", filepath, err)
	}

	gen := generate.New(fileSchema)
	structs, aliases, err := gen.CreateTypes()

	if err != nil {
		return fmt.Errorf("creating types failed: %v", err)
	}

	// TODO: allow output to file
	output(os.Stdout, structs, aliases)
	return nil
}

func prettyPrint(thing interface{}) {
	stringThing := fmt.Sprintf("%+v", thing)
	formattedThing, err := format.Source([]byte(stringThing))

	if err != nil {
		fmt.Printf("prettyPrint failed: %v", err)
	}

	fmt.Printf("%v\n", formattedThing)
}

func output(w io.Writer, structs map[string]generate.Struct, aliases map[string]generate.Field) {
	fmt.Fprintln(w, "// Code generated by schema-generate. DO NOT EDIT.")
	fmt.Fprintln(w)
	fmt.Fprintf(w, "package main\n")

	for _, k := range getOrderedFieldNames(aliases) {
		a := aliases[k]

		fmt.Fprintln(w, "")
		fmt.Fprintf(w, "// %s\n", a.Name)
		fmt.Fprintf(w, "type %s %s\n", a.Name, a.Type)
	}

	for _, k := range getOrderedStructNames(structs) {
		s := structs[k]

		fmt.Fprintln(w, "")
		outputNameAndDescriptionComment(s.Name, s.Description, w)
		fmt.Fprintf(w, "type %s struct {\n", s.Name)

		for _, fieldKey := range getOrderedFieldNames(s.Fields) {
			f := s.Fields[fieldKey]

			// Only apply omitempty if the field is not required.
			omitempty := ",omitempty"
			if f.Required {
				omitempty = ""
			}

			fmt.Fprintf(w, "  %s %s `json:\"%s%s\"`\n", f.Name, f.Type, f.JSONName, omitempty)
		}

		fmt.Fprintln(w, "}")
	}
}

func outputNameAndDescriptionComment(name, description string, w io.Writer) {
	if strings.Index(description, "\n") == -1 {
		fmt.Fprintf(w, "// %s %s\n", name, description)
		return
	}

	dl := strings.Split(description, "\n")
	fmt.Fprintf(w, "// %s %s\n", name, strings.Join(dl, "\n// "))
}


func getOrderedFieldNames(m map[string]generate.Field) []string {
	keys := make([]string, len(m))
	idx := 0
	for k := range m {
		keys[idx] = k
		idx++
	}
	sort.Strings(keys)
	return keys
}

func getOrderedStructNames(m map[string]generate.Struct) []string {
	keys := make([]string, len(m))
	idx := 0
	for k := range m {
		keys[idx] = k
		idx++
	}
	sort.Strings(keys)
	return keys
}